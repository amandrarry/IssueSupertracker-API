swagger: '2.0'
info:
  version: 0.0.1
  title: IssueSupertracker API
host: 'issuesupertracker.herokuapp.com'
basePath: /
schemes:
  - http
  - https
consumes:
  - application/json
produces:
  - application/json
  
securityDefinitions:
   APIKeyHeader:
     type: apiKey
     in: header
     name: clave_user
     
security:
  - APIKeyHeader: []

paths:
  /issues:issuesupertracker.herokuapp.com
    x-swagger-router-controller: issues_controller
    get:
      tags:
        - Issues
      summary: Consulta de issues
      description: Devuelve todos los issues de la DB.
      produces:
        - application/json
      parameters:
        - in: query
          name: type
          description: Obtiene los issues de un tipo concreto.
          required: false
          type: string
          enum:
            - Bug
            - Enhancement
            - Proposal
            - Task
        - in: query
          name: priority
          description: Obtiene los issues de una prioridad concreta.
          required: false
          type: string
          enum:
            - Trivial
            - Minorissuesupertracker.herokuapp.com
            - Major
            - Critical
            - Blocker
        - in: query
          name: status
          description: Obtiene los issues de un estado concreto.
          required: false
          type: string
          enum:
            - New
            - Open
            - On hold
            - Resolved
            - Duplicate
            - Invalid
            - Won't fix
            - Closed
        - in: query
          name: assignee
          description: Obtiene los issues asignados a un usuario concreto.
          required: false
          type: integer
        - in: query
          name: watcher
          description: Obtiene los issues visto por un usuario concreto.
          required: false
          type: integer
      responses:
        '200':
          description: Success
          schema:
            title: ArrayOfIssues
            type: array
            items:
              $ref: '#/definitions/Issue'
        '401':
          $ref: '#/responses/UnauthorizedError'
    
    post:
      tags:
        - Issues
      summary: Crea Issue.
      description: Crea un nuevo Issue.
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - in: formData
          name: Title
          type: string
          description: Titulo del issue
          required: true
        - in: formData
          name: Description
          type: string
          description: descripcion del issue
        - in: formData
          name: Status
          type: string
          description: Estado del issue
          required: true
          enum:
            - New
            - Open
            - On hold
            - Resolved
            - Duplicate
            - Invalid
            - Won't fix
            - Closed
        - in: formData
          name: Priority
          type: string
          description: Prioridad del issue
          required: true
          enum:
            - Trivial
            - Minor
            - Major
            - Critical
            - Blocker
        - in: formData
          name: Type
          type: string
          description: Tipo del issue
          required: true
          enum:
            - Bug
            - Enhancement
            - Proposal
            - Task
        - in: formData
          name: assignee_id
          type: integer
          description: Assignee del issue
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/Issue'
        '401':
          $ref: '#/responses/UnauthorizedError'
        '422':
          description: User does not exist
          schema:
            type: object
            properties:
              error:
                example: User does not exist

  /issues/{id}:
    get:
      tags:
        - Issues/id
      summary: Consulta issue concreto
      description: Obtiene un issue indicando su ID concreta.
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          description: ID del issue
          required: true
          type: integer
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Issue'
        '401':
          $ref: '#/responses/UnauthorizedError'
        '404':
          $ref: '#/responses/NotFound'

    delete:
      tags:
        - Issues/id
      summary: Elimina issue
      description: Elimina el issues con el id concretado.
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          description: ID del issue
          required: true
          type: integer
      responses:
        '200':
          description: Success
          schema:
            type: object
            properties:
              message:
                example: success
        '401':
          $ref: '#/responses/UnauthorizedError'
        '404':
          $ref: '#/responses/NotFound'

    put:
      tags:
        - Issues/id
      summary: Actualiza issue
      description: Actualiza el issue con el id concretado.
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          type: string
          description: Id del issue
          required: true
        - in: formData
          name: Title
          type: string
          description: Titulo del issue
          required: true
        - in: formData
          name: Description
          type: string
          description: Descripcion del issue
        - in: formData
          name: Status
          type: string
          description: Estado del issue
          required: true
          enum:
            - New
            - Open
            - On hold
            - Resolved
            - Duplicate
            - Invalid
            - Won't fix
            - Closed
        - in: formData
          name: Priority
          type: string
          description: Prioridad del issue
          required: true
          enum:
            - Trivial
            - Minor
            - Major
            - Critical
            - Blocker
        - in: formData
          name: Type
          type: string
          description: Tipo del issue
          required: true
          enum:
            - Bug
            - Enhancement
            - Proposal
            - Task
        - in: formData
          name: assignee_id
          type: string
          description: Assignee del issue
      responses:
        '200':
          description: Success
          schema:
            type: object
            properties:
              message:
                example: success
        '401':
          $ref: '#/responses/UnauthorizedError'
        '404':
          $ref: '#/responses/NotFound'
        '422':
          description: User does not exist
          schema:
            type: object
            properties:
              error:
                example: User does not exist
  
  
  /issues/{issue_id}/comments:
    get:
      tags:
        - Comments
      summary: Consulta todos los comentarios de un issue
      description: Devuelve todos los comentarios de un issue concreto cuya ID se ha indicado.
      produces:
        - application/json
      parameters:
        - in: path
          name: issue_id
          description: ID del issue
          required: true
          type: integer
      responses:
        '200':
          description: Success
          schema:
            title: ArrayOfComments
            type: array
            items:
              $ref: '#/definitions/Comment'
        '401':
          $ref: '#/responses/UnauthorizedError'
        '404':
          $ref: '#/responses/NotFound'

    post:
      tags:
        - Comments
      summary: Crea un comentario en un issue
      description: Crea un comentario en un issue concreto cuya ID se ha indicado.
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - in: path
          name: issue_id
          description: ID del issue
          required: true
          type: integer
        - in: formData
          name: body
          type: string
          description: Texto del comentario
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/Comment'
        '401':
          $ref: '#/responses/UnauthorizedError'
        '404':
          $ref: '#/responses/NotFound'
          
  /issues/{issue_id}/comments/{comment_id}:
    get:
      tags:
        - Comments/id
      summary: Consulta un comentario de un issue
      description: Devuelve un comentario en especifico de un issue concretando su ID.
      produces:
        - application/json
      parameters:
        - in: path
          name: issue_id
          description: ID del issue
          required: true
          type: integer
        - in: path
          name: comment_id
          description: ID del comentario
          required: true
          type: integer
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Comment'
        '401':
          $ref: '#/responses/UnauthorizedError'
        '404':
          $ref: '#/responses/NotFound'
    put:
      tags:
        - Comments/id
      summary: Actualiza un comentario
      description: Si eres el creador del comentario con esa ID lo actualizas.
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - in: path
          name: issue_id
          description: ID del issue
          required: true
          type: integer
        - in: path
          name: comment_id
          description: ID del comentario
          required: true
          type: integer
        - in: formData
          name: body
          type: string
          description: Texto del comentario
      responses:
        '200':
          description: Success
          schema:
            type: object
            properties:
              message:
                example: success
        '401':
          $ref: '#/responses/UnauthorizedError'
        '403':
          description: You can't modify a Comment created by other users
          schema:
            type: object
            properties:
              error:
                example: 'Forbidden, you are not the creator of this comment'
        '404':
          $ref: '#/responses/NotFound'
    delete:
      tags:
        - Comments/id
      summary: Elimina un comentario
      description: Si eres el creador del comentario indicado por la ID lo eliminas.
      produces:
        - application/json
      parameters:
        - in: path
          name: issue_id
          description: ID del issue
          required: true
          type: integer
        - in: path
          name: comment_id
          description: ID del comentario
          required: true
          type: integer
      responses:
        '200':
          description: Success
          schema:
            type: object
            properties:
              message:
                example: success
        '401':
          $ref: '#/responses/UnauthorizedError'
        '403':
          description: You can't delete a Comment created by other users
          schema:
            type: object
            properties:
              error:
                example: 'Forbidden, you are not the creator of this comment'
        '404':
          $ref: '#/responses/NotFound'
  
  
  /issues/{issue_id}/votes:
    x-swagger-router-controller: votes_controller
    post:
      tags:
        - Votes
      summary: Vota o anula la votacion
      description: Vota o anula la votacion del issue identificado por el id con el usuario identificado
      parameters:
        - in: path
          name: issue_id
          description: ID del issue
          required: true
          type: integer
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Issue'
        '401':
          $ref: '#/responses/UnauthorizedError'
        '404':
          $ref: '#/responses/NotFound'
          
  
  /issues/{issue_id}/watchers:
    x-swagger-router-controller: watchers_controller
    post:
      tags:
        - Watchers
      summary: observador o no observador
      description: marca como observador o como no observador del issue identificado por el id con el usuario identificado
      parameters:
        - in: path
          name: issue_id
          description: ID del issue
          required: true
          type: integer
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Issue'
        '401':
          $ref: '#/responses/UnauthorizedError'
        '404':
          $ref: '#/responses/NotFound'
  
  /issues/{issue_id}/attachment:
    get:
      tags:
        - Attachments
      summary: Obtiene un attachment.
      description: Obtiene un attachment asociado a un Issue concreto.
      produces:
        - application/json
      parameters:
        - in: path
          name: issue_id
          description: ID del issue
          required: true
          type: integer
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Issue'
        '401':
          $ref: '#/responses/UnauthorizedError'
        '404':
          $ref: '#/responses/NotFound'
    post:
      tags:
        - Attachments
      summary: Adjunta un archivo a un Issue.
      description: Adjunta un archivo a un Issue.
      produces:
        - application/json
      consumes:
        - multipart/form-data
      parameters:
        - in: path
          name: issue_id
          description: ID del issue
          required: true
          type: integer
        - in: formData
          name: file
          description: Archivo a adjuntar
          type: file
          required: true
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/Attachment'
        '401':
          $ref: '#/responses/UnauthorizedError'
        '403':
          description: You can't attach a file to a Issue of other users
          schema:
            type: object
            properties:
              error:
                example: 'Forbidden, you are not the creator of this issue'
        '404':
          $ref: '#/responses/NotFound'
          
          
  /issues/{issue_id}/comments/{comment_id}/attachment:
    get:
      tags:
        - Attachments
      summary: Obtiene un attachment de un comentario.
      description: Obtiene un attachment de un comentario concreto.
      produces:
        - application/json
      parameters:
        - in: path
          name: issue_id
          description: ID del issue
          required: true
          type: integer
        - in: path
          name: comment_id
          description: ID del comentario
          required: true
          type: integer
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Attachment'
        '401':
          $ref: '#/responses/UnauthorizedError'
        '404':
          $ref: '#/responses/NotFound'
    post:
      tags:
        - Attachments
      summary: Adjunta un attachment a un comentario.
      description: Adjunta un attachment a un comentario concreto.
      produces:
        - application/json
      consumes:
        - multipart/form-data
      parameters:
        - in: path
          name: issue_id
          description: ID del issue
          required: true
          type: integer
        - in: path
          name: comment_id
          description: ID del comentario
          required: true
          type: integer
        - in: formData
          name: file
          description: Archivo a adjuntar
          type: file
          required: true
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/Attachment'
        '401':
          $ref: '#/responses/UnauthorizedError'
        '403':
          description: You can't attach an image to a comment of other users
          schema:
            type: object
            properties:
              error:
                example: 'Forbidden, you are not the creator of this comment'
        '404':
          $ref: '#/responses/NotFound'
  
definitions:
  Issue:
    type: object
    properties:
      id:
        type: integer
        example: 1
      Title:
        type: string
        example: Issue 1
      Description:
        type: string
        example: description
      Type:
        type: string
        example: Bug
      Priority:
        type: string
        example: Trivial
      Status:
        type: string
        example: New
      assignee_id:
        type: integer
        example: 1
      user_id:
        type: integer
        example: 1
      Votes:
        type: integer
        example: 1
      Watchers:
        type: integer
        example: 1
      attachment_file_name:
        type: string
        example: attachment.jpg
      attachment_content_type:
        type: string
        example: image/jpg
      attachment_file_size:
        type: integer
        example: 100
      attachment_updated_at:
        type: string
        format: date
        example: '2019-07-07T18:28:02.933Z'
      created_at:
        type: string
        format: date
        example: '2019-07-07T18:28:02.933Z'
      updated_at:
        type: string
        format: date
        example: '2019-07-07T18:28:02.933Z'
      
      
  Comment:
    type: object
    properties:
      body:
        type: string
        example: This is an example comment
      issue_id:
        type: integer
        example: 1
      user_id:
        type: integer
        example: 1
      attachment_file_name:
        type: string
        example: attachment.jpg
      attachment_content_type:
        type: string
        example: image/jpg
      attachment_file_size:
        type: integer
        example: 100
      attachment_updated_at:
        type: string
        format: date
        example: '2019-07-07T18:28:02.933Z'
      created_at:
        type: string
        format: date
        example: '2019-07-07T18:28:02.933Z'
      updated_at:
        type: string
        format: date
        example: '2019-07-07T18:28:02.933Z'
  
  Attachment:
    type: object
    properties:
      attachment_file_name:
        type: string
        example: attachment.jpg
      attachment_content_type:
        type: string
        example: image/jpg
      attachment_file_size:
        type: integer
        example: 100
      attachment_updated_at:
        type: string
        format: date
        example: '2019-07-07T18:28:02.933Z'
 
responses:
  UnauthorizedError:
    description: API key is missing or invalid
    schema:
      type: object
      properties:
        error:
          example: You need to sign in or sign up before continuing.
  NotFound:
    description: Object not found
    schema:
      type: object
      properties:
        error:
          example: Couldn't find Object with 'id'=1
  
  
